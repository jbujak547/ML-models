# -*- coding: utf-8 -*-
"""BTCtradingmodel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YN4BuFNEIgOcaB76Potj7xVJ-svJbKMH
"""

import pandas as pd
import numpy as np
from sklearn.svm import LinearSVC
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
from sklearn.metrics import PredictionErrorDisplay
from yellowbrick.classifier import ConfusionMatrix
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import LabelEncoder, StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.neural_network import MLPClassifier
from sklearn.linear_model import SGDClassifier
from sklearn.datasets import make_circles, make_classification, make_moons
from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis
from sklearn.ensemble import AdaBoostClassifier, RandomForestClassifier
from sklearn.gaussian_process import GaussianProcessClassifier
from sklearn.gaussian_process.kernels import RBF
from sklearn.inspection import DecisionBoundaryDisplay
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier






df = pd.read_csv('out24.csv', sep =',')

df['LONG'] = np.where(df['close24'] > df['open24'], True, False)
df.drop(['open24', 'close24'], axis=1, inplace = True)

dfL = df.where(df['LONG'] == True).dropna()
dfS = df.where(df['LONG'] == False).dropna()
dfL= dfL.head(16341)


dfn = dfL._append(dfS)



sns.countplot(x='LONG', data=dfn)
plt.show()

numeric_columns = df.select_dtypes(include=['int64', 'float64']).columns
scaler = StandardScaler()
df[numeric_columns] = scaler.fit_transform(df[numeric_columns])



y = df['LONG']
X = df.loc[:, df.columns != 'LONG']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)





clf = MLPClassifier(random_state=1, max_iter=10000, verbose=True, hidden_layer_sizes=400, solver='sgd', activation='relu', learning_rate='adaptive', nesterovs_momentum=False)
clf.fit(X_train, y_train)


classes = ['False','True']
cm = ConfusionMatrix(clf, classes=classes)
cm.fit(X_train, y_train)
cm.score(X_test, y_test)
cm.show()