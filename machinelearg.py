# -*- coding: utf-8 -*-
"""machinelearg.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aibpTUANfutOXvZE-eQitOj6ycjWFaui
"""

import numpy as np
from PIL import Image
import os
import pandas as pd
import sys
import shutil
from random import randrange

images = pd.DataFrame(columns=['class', 'nparray'])
path = '/Users/janbujak/Downloads/ML project/archive-3/images/images'
new_path = '/Users/janbujak/Downloads/ML project/Data'
directory = os.fsencode(path)
names = []

for folder in os.listdir(directory):
    foldername = os.fsdecode(folder)
    subpath = os.path.join(path, foldername)
    subdirectory = os.fsencode(subpath)
    new_subpath = os.path.join(new_path, foldername)

    os.mkdir(new_subpath)

    for subfolder in os.listdir(subpath):

        subfoldername = os.fsdecode(subfolder)

        subfolderpath = os.path.join(subpath, subfoldername)
        subfolderdir = os.fsencode(subfolderpath)
        #print(os.listdir(subfolderdir))
        #print(subfolderdir)
        for file in os.listdir(subfolderdir):
            filename = os.fsdecode(file)
            new_filename = filename
            while new_filename in names:
                new_filename = filename + str(randrange(100))+'.png'
            filepath = os.path.join(subfolderpath, filename)
            new_file_path = os.path.join(new_subpath, new_filename)
            print(new_file_path)
            shutil.move(filepath, new_file_path)
            names.append(new_filename)

import numpy as np
from PIL import Image
import os
import pandas as pd
import sys
import shutil
from random import randrange

names =[]
paper = ['cardboard_boxes', 'cardboard_packaging', 'magazines', 'newspaper', 'office_paper', 'paper_cups', 'styrofoam_cups', 'styrofoam_food_containers']
glass = ['glass_food_jars', 'glass_cosmetic_containers', 'glass_bevarage_bottles']
plastic = ['disposable_plastic_cutlery', 'plastic_cup_lids', 'plastic_detergent_bottles', 'plastic_food_containers', 'plastic_shopping_bags', 'plastic_soda_bottles', 'plastic_straws', 'plastic_trash_bags', 'plastic_water_bottles']
metal = ['steel_food_cans', 'aluminium_food_cans', 'aluminium_soda_cans', 'aerosol_cans']
mixed = ['clothing', 'coffe_grounds', 'eggshells', 'food_waste', 'shoes', 'tea_bags']

images = pd.DataFrame(columns=['class', 'nparray'])
path = '/Users/janbujak/Downloads/ML project/Data'
new_path = '/Users/janbujak/Downloads/ML project/DataClasses'
directory = os.fsencode(path)

for folder in os.listdir(directory):
    foldername = os.fsdecode(folder)
    print(foldername)
    if foldername in paper:
        subpath = os.path.join(path, foldername)
        subdirectory = os.fsencode(subpath)
        new_subpath = os.path.join(new_path, 'paper')
        for file in os.listdir(subdirectory):
            filename = os.fsdecode(file)
            new_filename = filename
            while new_filename in names:
                new_filename = filename + str(randrange(100)) + '.png'
            filepath = os.path.join(subpath, filename)
            new_file_path = os.path.join(new_subpath, new_filename)
            print(new_file_path)
            shutil.move(filepath, new_file_path)
            names.append(new_filename)
    if foldername in glass:
        subpath = os.path.join(path, foldername)
        subdirectory = os.fsencode(subpath)
        new_subpath = os.path.join(new_path, 'glass')
        for file in os.listdir(subdirectory):
            filename = os.fsdecode(file)
            new_filename = filename
            while new_filename in names:
                new_filename = filename + str(randrange(100)) + '.png'
            filepath = os.path.join(subpath, filename)
            new_file_path = os.path.join(new_subpath, new_filename)
            print(new_file_path)
            shutil.move(filepath, new_file_path)
            names.append(new_filename)
    if foldername in plastic:
        subpath = os.path.join(path, foldername)
        subdirectory = os.fsencode(subpath)
        new_subpath = os.path.join(new_path, 'plastic')
        for file in os.listdir(subdirectory):
            filename = os.fsdecode(file)
            new_filename = filename
            while new_filename in names:
                new_filename = filename + str(randrange(100)) + '.png'
            filepath = os.path.join(subpath, filename)
            new_file_path = os.path.join(new_subpath, new_filename)
            print(new_file_path)
            shutil.move(filepath, new_file_path)
            names.append(new_filename)
    if foldername in metal:
        subpath = os.path.join(path, foldername)
        subdirectory = os.fsencode(subpath)
        new_subpath = os.path.join(new_path, 'metal')
        for file in os.listdir(subdirectory):
            filename = os.fsdecode(file)
            new_filename = filename
            while new_filename in names:
                new_filename = filename + str(randrange(100)) + '.png'
            filepath = os.path.join(subpath, filename)
            new_file_path = os.path.join(new_subpath, new_filename)
            print(new_file_path)
            shutil.move(filepath, new_file_path)
            names.append(new_filename)
    if foldername in mixed:
        subpath = os.path.join(path, foldername)
        subdirectory = os.fsencode(subpath)
        new_subpath = os.path.join(new_path, 'mixed')
        for file in os.listdir(subdirectory):
            filename = os.fsdecode(file)
            new_filename = filename
            while new_filename in names:
                new_filename = filename + str(randrange(100)) + '.png'
            filepath = os.path.join(subpath, filename)
            new_file_path = os.path.join(new_subpath, new_filename)
            print(new_file_path)
            shutil.move(filepath, new_file_path)
            names.append(new_filename)

import matplotlib.pyplot as plt
import numpy as np
import os
import PIL
import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential





val_ds = tf.keras.preprocessing.image_dataset_from_directory(
    '/Users/janbujak/Downloads/ML project/DataClasses',
    labels="inferred",
    label_mode="int",
    class_names=None,
    color_mode="rgb",
    batch_size=32,
    image_size=(256, 256),
    shuffle=True,
    seed=123,
    interpolation="bilinear",
    follow_links=False,
    validation_split=0.2,
    subset="validation"
)
train_ds = tf.keras.preprocessing.image_dataset_from_directory(
    '/Users/janbujak/Downloads/ML project/DataClasses',
    labels="inferred",
    label_mode="int",
    class_names=None,
    color_mode="rgb",
    batch_size=32,
    image_size=(256, 256),
    shuffle=True,
    seed=123,
    interpolation="bilinear",
    follow_links=False,
    validation_split=0.2,
    subset="training"
)

class_names = train_ds.class_names
AUTOTUNE = tf.data.AUTOTUNE

train_ds = train_ds.cache().shuffle(1000).prefetch(buffer_size=AUTOTUNE)
val_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)
normalization_layer = tf.keras.layers.experimental.preprocessing.Rescaling(1./255)
normalized_ds = train_ds.map(lambda x, y: (normalization_layer(x), y))
image_batch, labels_batch = next(iter(normalized_ds))
first_image = image_batch[0]
num_classes = len(class_names)

model = Sequential([
  layers.experimental.preprocessing.Rescaling(1./255, input_shape=(256, 256, 3)),
  layers.Conv2D(16, 3, padding='same', activation='relu'),
  layers.MaxPooling2D(),
  layers.Conv2D(32, 3, padding='same', activation='relu'),
  layers.MaxPooling2D(),
  layers.Conv2D(64, 3, padding='same', activation='relu'),
  layers.MaxPooling2D(),
  layers.Flatten(),
  layers.Dense(128, activation='relu'),
  layers.Dense(num_classes)
])
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])
model.summary()
epochs=10
history = model.fit(
  train_ds,
  validation_data=val_ds,
  epochs=epochs
)



model.save('/Users/janbujak/Downloads/ML project/modelTrash.keras')

import numpy as np
import os
import PIL
from PIL import Image
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow import keras
from keras.preprocessing import image

model = load_model('/content/modelTrash.keras')
#print(model)


images = image.load_img('/content/plastic-bag.png')

input_arr = image.img_to_array(images)
input_arr_resized = tf.keras.preprocessing.image.smart_resize(
    x=input_arr,
    size=(256, 256),
    interpolation='bilinear'
)
input_arr = np.array([input_arr_resized])  # Convert single image to a batch.

predictions = model(input_arr)
print(model.predict_classes(input_arr))
print('done')

"""Epoch 1/10
325/325 [==============================] - 269s 825ms/step - loss: 1.5927 - accuracy: 0.4145 - val_loss: 1.1663 - val_accuracy: 0.5304
Epoch 2/10
325/325 [==============================] - 270s 831ms/step - loss: 1.0040 - accuracy: 0.6072 - val_loss: 0.9701 - val_accuracy: 0.6369
Epoch 3/10
325/325 [==============================] - 281s 864ms/step - loss: 0.6828 - accuracy: 0.7405 - val_loss: 0.9407 - val_accuracy: 0.6800
Epoch 4/10
325/325 [==============================] - 322s 989ms/step - loss: 0.3961 - accuracy: 0.8605 - val_loss: 1.0415 - val_accuracy: 0.7250
Epoch 5/10
325/325 [==============================] - 340s 1s/step - loss: 0.2100 - accuracy: 0.9268 - val_loss: 1.1989 - val_accuracy: 0.7396
Epoch 6/10
325/325 [==============================] - 334s 1s/step - loss: 0.1392 - accuracy: 0.9560 - val_loss: 1.4011 - val_accuracy: 0.7392
Epoch 7/10
325/325 [==============================] - 329s 1s/step - loss: 0.1180 - accuracy: 0.9630 - val_loss: 1.4692 - val_accuracy: 0.7512
Epoch 8/10
325/325 [==============================] - 855s 3s/step - loss: 0.0826 - accuracy: 0.9761 - val_loss: 1.6395 - val_accuracy: 0.7585
Epoch 9/10
325/325 [==============================] - 1147s 4s/step - loss: 0.0530 - accuracy: 0.9852 - val_loss: 1.7501 - val_accuracy: 0.7581
Epoch 10/10
325/325 [==============================] - 267s 822ms/step - loss: 0.0539 - accuracy: 0.9867 - val_loss: 1.6437 - val_accuracy: 0.7573
"""